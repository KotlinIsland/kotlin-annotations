/*
 * Copyright 2000-2020 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.30' apply false
}

ext.projectVersion = projectVersion
if (System.getenv('BINTRAY_USER') == null) {
    ext.projectVersion = ext.projectVersion + '-SNAPSHOT'
}
println "##teamcity[setParameter name='java.annotations.version' value='$projectVersion']"

allprojects {
    group 'org.jetbrains'
    version rootProject.ext.projectVersion
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    repositories {
        mavenCentral()
    }
}

project(':java5').archivesBaseName = 'annotations-java5'
project(':java8').archivesBaseName = 'annotations'

configure([project(':java5'), project(':java8')]) {
    task mainJar(type: Jar) {
        manifest {
            attributes('Automatic-Module-Name': 'org.jetbrains.' + archivesBaseName.replace('-', '_'))
        }
    }

    task sourceJar(type: Jar) {
        baseName = archivesBaseName + '-sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
    }

    artifacts {
        archives mainJar, sourceJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId archivesBaseName
                artifact mainJar
                artifact sourceJar {
                    classifier 'sources'
                }
                artifact javadocJar {
                    classifier 'javadoc'
                }
                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = DELEGATE_FIRST
                        name 'JetBrains Java Annotations'
                        description 'A set of annotations used for code inspection support and code documentation.'
                        url 'https://github.com/JetBrains/java-annotations'
                        scm {
                            url 'https://github.com/JetBrains/java-annotations'
                            connection 'scm:git:git://github.com/JetBrains/java-annotations.git'
                            developerConnection 'scm:git:ssh://github.com:JetBrains/java-annotations.git'
                        }
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'JetBrains'
                                name 'JetBrains Team'
                                organization 'JetBrains'
                                organizationUrl 'https://www.jetbrains.com'
                            }
                        }
                    }
                }

            }
        }
    }
    if (System.getenv('BINTRAY_USER') != null) {
        bintray {
            user = System.getenv('BINTRAY_USER')
            key = System.getenv('BINTRAY_KEY')
            publish = true
            publications = ['mavenJava']
            pkg {
                userOrg = 'jetbrains'
                repo = 'intellij-redist'
                name = 'org.jetbrains:' + archivesBaseName
                version {
                    name = rootProject.ext.projectVersion
                }
            }
        }
    }

}

configure(project(':java5')) {
    def generatedSourcesDir = "${buildDir}/generated/"

    sourceSets {
        generated {
            java.srcDir generatedSourcesDir
        }
    }

    task generateSrc(type: Copy) {
        from project(':common').sourceSets.main.java
        into generatedSourcesDir
        filter { line -> line.replaceAll(", ElementType.TYPE_USE", "")}
    }

    compileJava {
        dependsOn(generateSrc)
        source sourceSets.generated.java
    }

    mainJar {
        from sourceSets.main.output
    }

    sourceJar {
        dependsOn(generateSrc)
        from sourceSets.generated.java
    }

    javadoc {
        source = [sourceSets.generated.java]
    }
}

configure(project(':java8')) {
    dependencies {
        compile project(':common')
    }

    mainJar {
        from sourceSets.main.output
        from project(':common').sourceSets.main.output
    }

    sourceJar {
        from sourceSets.main.java
        from project(':common').sourceSets.main.java
    }

    javadoc {
        source = [sourceSets.main.java, project(':common').sourceSets.main.java]
    }
}

